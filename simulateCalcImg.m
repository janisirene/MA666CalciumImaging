function [ROI, full] = simulateCalcImg(sz, dur, nROI, snr, noisePW, svMovie)
%simulateCalcImg simulates calcium imaging data as a movie using randomly
%placed ellipses as cells. DFF signals (poisson process spike train 
%convolved with calcium indicator impulse response) are generated by
%code from the Helmchen lab.
% 
% -ROI are modeled as ellipses placed randomly, radius at least 2.5
% -spike rate is random in range [.5 3] Hz
% -if 2 ROI overlap, the overlapping indices will contain the signal of
%   one cell, not the summation of both
%
% [ROI, full] = simulateCalcImg(sz, dur, nROI, snr, svMovie)
% INPUTS:
%   sz      - spatial dimension of signal (sz x sz) [default 50]
%   dur     - duration in seconds of signal (sampled at 30Hz) [default 5]
%   nROI    - number of ROI to simulate [default 3]
%   snr     - signal to noise ratio of images (max signal/sd of noise)[default 3]
%   noisePW - for added noise - magnitude spectrum (1/freq^noisePW) [default 0]
%   svMovie - destination file to save .tif (if empty don't save) [default
%             '']
% OUTPUTS:
%   ROI     - structure with parameters for each ROI
%   full    - 3d array [sz x sz x dur*30] of simulation
%
% Beware using input values that are large - you're at risk of
% running out of memory or generating very large files.
%
% extra code required: https://github.com/HelmchenLab/CalciumSim
%   just download the code and add it to your path
%
% FUTURE STEPS: (On making the simulation more realistic)
%   1. Do a more in depth analysis of the properties of real data.
%   2. What other cell shapes are there? - donuts, gaussian blobs, axonal
%       signals.
%   3. What does noise in calcium imaging signal really look like?
%       Observation of single photon images show that the noise appears to
%       correlated with the signal. Brown noise is close but not a great
%       descriptor of real noise
%
% author: Janis Intoy
% date: November 3, 2016
% modified: November 28, 2016 (use noise3 to generate different noise types)

addpath(genpath('CalciumSim-master'));

%% default parameters
if ~exist('sz', 'var')
    sz = 50; 
end
if ~exist('dur', 'var')
    dur = 5; 
end
if ~exist('nROI', 'var')
    nROI = 3; 
end
if ~exist('snr', 'var')
    snr = 3; 
end
if ~exist('noisePW', 'var')
    noisePW = 0; 
end
if ~exist('svMovie', 'var')
    svMovie = ''; 
end

%% simulation parameters
snrDFF = inf; % signal to noise ratio of the DFF singals

%% basic parameters that should be tuned to simulate realistic data
Fs = 30; % 30 Hz recording

% ROI shape parameters
% basic ellipse shape: (x/a)^2 + (y/b)^2 = 1
% a, b = mnROI + sdROI * rand
mnROI = 2.55;
sdROI = 5;

%% fluorescence model parameters
% range from which to randomly generate a spike rate
spikeRateMax = 3;
spikeRateMin = .5;

nT = Fs * dur; % number of time samples

%% randomize center of ROI, simulate as ellipses of some size
% Select a random location and size for each cell, then generate a unique
% fluorescence signal for it using the Helmchen code using a random spike
% rate.
ROI(nROI) = struct('center', [], 'var', [], 'indices', [], 'DFF', []);
[xgrid, ygrid] = meshgrid(1:sz, 1:sz);

for i = 1:nROI
    center = randi(sz, [1, 2]); % random center of ellipse
    v = rand([1, 2]) * sdROI + mnROI; % random a, b for ellipse
    
    % pixels within the ROI
    idx = find(((xgrid - center(1)) / v(1)).^2 + ...
        ((ygrid - center(2)) / v(2)).^2 < 1);
    
    % generate a DFF time course for this ROI
    S = struct('reconAlg', 'none',...
               'frameRate', Fs,...
               'snr', snrDFF,...
               'dur', dur,...
               'spikeRate', spikeRateMin+(spikeRateMax-spikeRateMin)*rand(1));
    S = modelCalcium(S, 0); % use saved parameters and don't plot
    DFF = S.data.noisyDFFlowResT;
    
    % save everything in struct
    ROI(i).center = center;
    ROI(i).var = v;
    ROI(i).indices = idx;
    ROI(i).DFF = DFF;
end

%% plot a 2d image of the ROI
t = linspace(0, 2*pi, 100);
figure(50); clf; hold on;
for i = 1:nROI
    plot(ROI(i).var(1) * cos(t) + ROI(i).center(1),...
        ROI(i).var(2) * sin(t) + ROI(i).center(2));
end
axis image;
set(gca, 'XLim', [1, sz], 'YLim', [1, sz]);
title('simulated ROI');
set(gca, 'YDir', 'reverse');

%% what's the maximum fluorescence?
cmax = 0;
for i = 1:nROI
    cmax = max([cmax, ROI(i).DFF]);
end

% snr is defined here as the maximum amplitude of the signal divided by the
% standard deviation of the noise - so here derive the std of the noise
sdnoise = cmax / snr;

%% simulate and show calcium imaging movie
% set up for plotting within Matlab
figure('Visible', 'on'); clf; % make this visible to watch as movie
ax1 = axes('Position', [0.1 0.1 .8 .8]); hold on;
himg = imagesc(zeros(sz, sz));
axis image;
caxis([0, cmax]);
colormap('gray');

for i = 1:nROI
    plot(ROI(i).var(1) * cos(t) + ROI(i).center(1),...
        ROI(i).var(2) * sin(t) + ROI(i).center(2),...
        'r', 'linewidth', 2);
end
xlim([1, sz]);
ylim([1, sz]);
set(gca, 'YDir', 'reverse');

% initialize the final version of the simulation as a 3d array
full = nan(sz, sz, nT);

% generate the noise to add to the signal
ns3 = noise3([sz, sz, nT], noisePW) * sdnoise;

% Now loop over each time frame - put the signal into the simulated ROI and
% add noise to the entire spatial field. Plot the data and write the frame
% to a .tif if requested.
for t = 1:nT
    temp = zeros(sz, sz);
    for i = 1:nROI
        temp(ROI(i).indices) = ROI(i).DFF(t);
    end
    
    % add noise
    temp = temp + ns3(:, :, t);
    
    full(:, :, t) = temp; % save this frame to the 3d array
    
    set(himg, 'CData', temp); % udpate the figure

    % If requested, write to a tif file.
    if ~isempty(svMovie)
        imwrite(temp, svMovie,'tif','WriteMode','append');
    end
end
